const express = require('express');
const app = express();
const bodyParser = require('body-parser');

// Built-in middleware to parse JSON bodies
app.use(express.json());

// Application-level middleware
app.use((req, res, next) => {
  console.log(`Request received: ${req.method} ${req.url}`);
  next();
});

// Simulated database
let authors = [];

// Router-level middleware
const authorRouter = express.Router();

// Configurable middleware
const authenticate = (req, res, next) => {
  const { username, password } = req.body;
  const author = authors.find(a => a.username === username && a.password === password);
  if (!author) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  req.author = author;
  next();
};

// Registering a new author
authorRouter.post('/register', (req, res) => {
  const { username, password } = req.body;
  const author = { username, password };
  authors.push(author);
  res.status(201).json({ message: 'Author registered successfully' });
});

// Fetching all authors
authorRouter.get('/', (req, res) => {
  res.json(authors);
});

// Blog data
let blogs = [];

// Creating new blog
authorRouter.post('/blogs', authenticate, (req, res) => {
  const { title, content } = req.body;
  const newBlog = { authorId: req.author.id, title, content };
  blogs.push(newBlog);
  res.status(201).json({ message: 'Blog created successfully' });
});

// Retrieving blogs by author's ID
authorRouter.get('/blogs/:authorId', (req, res) => {
  const { authorId } = req.params;
  const authorBlogs = blogs.filter(blog => blog.authorId === authorId);
  res.json(authorBlogs);
});

// Mounting authorRouter at /authors endpoint
app.use('/authors', authorRouter);

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
